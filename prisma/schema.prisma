// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  timetable TimeTable[]
  attendance Attendance[]
  attendSan AttendSan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}


model TimeTable {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  className String
  period Int //何限目かを表すカラム
  day Int //曜日を表すカラム
  beingTime String //授業の開始時間
  endTime String //授業の終了時間
  createdAt DateTime @default(now())
}




model Attendance {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  semester String //学期を区別するために使用
  className String //出席したクラスを記録
  createdAt DateTime @default(now())
}

model AttendSan { //キャラクター一種類の場合
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  character String //ユーザーがつけたキャラクター名
  exp Float //経験値
  status Int //段階評価bad1->5good
  createdAt DateTime @default(now())
}